/* This is the todo list from Rohit, just take out the things once they are done... */

/* other improvements I'd like to suggest: */
/* * we should employ a delay if there is a problem with sending
 * update over I2c. I.e. if there is a collision, for instance, the
 * module(s) discovering that someone else is sending data should
 * back off and retry after some time--a few random
 * milliseconds. Random delays would be nice, although not
 * essential. Don't have all modules back off for the same amount of
 * time, otherwise they may continue to collide for a while. */

/* Didn't we already come to the conclusion that this isn't a problem
 * because the one that pulls down the scl first is the one that
 * becomes master? At least I havn't managed to create collisions
 * without disconnecting the LAN...   :) */

/** we should use better name for the currentNumber and lastToken. I would choose token (for the number being serviced), and largestToken (for the largest token being serviced anywhere). */

/* Sorry for the confusion, I meant the number we just served and the one that we are starting to serve for the PWM of the display, those two variables don't define the range (however we still have to make a range...) */


/* * We should employ a sleep when nothing's happening. The system
 * currently polls all the time, and although that is just a small
 * waste of power, but you should avoid it--it will also help you
 * prepare for designing other systems where power economy will be
 * critical. Refer to
 * http://www.nongnu.org/avr-libc/user-manual/index.html and
 * http://www.nongnu.org/avr-libc/user-manual/modules.html. Look at
 * the documentation at
 * http://www.nongnu.org/avr-libc/user-manual/group__avr__sleep.html */
/* For you, the following should apply: */
/* #include <avr/sleep.h> */

/*    ... */
/*      set_sleep_mode(<mode>); */
/*      sleep_mode(); */

/* in other words, set the sleep mode to something useful during
 * ioinit(). and then if there is no more data to be read from i2c,
 * you should enter sleep by calling sleep_mode(). Please note, you
 * should enter sleep ONLY IF THERE IS NOTHING TO DO. If you enter
 * sleep while there might be something to do, then you'll be asking
 * for trouble. So look at the main loop carefully, and figure out how
 * to do this. I want you to do this yourself. */

/* Lastly, I would like you to have a separate mode where one of the
 * modules becomes the token dispenser. You will need to add a new
 * command for the i2c bus. This will be something like the NewToken
 * command. The token dispenser will be the only module capable of
 * allocating a new token, and then it will send a broadcast on the
 * i2c bus about the new tokens. The other modules should then pick up
 * new tokens only if something has been dispensed. This isn't hard,
 * and it should be fun. */

/* As a general remark, I spend most of my day at work, and then on
 * many evenings Tineke likes to be shown around Taipei. If we do
 * anything in the evening, often it is late when we return. I am
 * afraid I won't be able to spend much time with you in the evenings
 * as long as she's in Taiwan. */

/*
 *
 * A few things I would like to add;
 *
 * I think that we should make some improvements to the communication,
 * because we can't use the system when there is only one module, due to
 * the fact that it waits for a reply from one of the other modules, and
 * I don't like that we are not keeping track of the modules.
 *
 * I rely rely want us to have a system in which each module knows who
 * else is there and can keep track of who got which information...
 *
 * We have added the integration from one number to another, which is
 * nice. But I would also like to add the function that takes care of the
 * average time and displays it at the enterance module...
 */


/**
 * @file   counter.c
 * @author Rohit Grover, Dyuman Mezzetti, Chandran Goodchild
 * @date   Mon Nov 28 2011
 *
 * @brief This program drives the Financial Service Token System.
 *
 * Copyright 2011-2020 Rohit Grover, Dyuman Mezzetti, Chandran
 * Goodchild. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * - Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *
 * - Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the
 * distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY Rohit and Dyuman ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL Rohit or Dyuman BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
 * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
 * DAMAGE
 */

#include <util/delay.h>
#include "USI_TWI_Master.h"
#include "USI_TWI_Slave.h"
#include <avr/io.h>
#include <avr/interrupt.h>
#include <avr/sleep.h>
#include <avr/power.h>
#include <stdbool.h>


/* All definitions */
#define F_CPU 1000000         /* Define the CPU clockrate--this plays a role */
                              /* when using the delay loop.  */
#define TIMER_SNAPSHOT_MS() ((ticks << 8) | TCNT0)
#define DEBOUNCE_DELAY   1500
#define LED_PIN          PB1
#define BUTTON_PIN       PB0
#define CUR_NUM_CMD      0xF2
#define CUR_NUM_CMD_SIZE 3
#define UPPER_RANGE_CMD      0xF3
#define UPPER_RANGE_CMD_SIZE 3
#define RETRANSMIT_COUNT 25
#define TWI_BROADCAST_ADDRESS (0x0)

volatile uint8_t token; /* The current number that is being displayed */
volatile uint8_t lowerRange;	/* The current number that has been recieved over TWI */
volatile uint8_t upperRange;
volatile uint8_t mode;
volatile uint8_t mode2;
volatile bool     buttonPressed = false;
volatile uint32_t ticks;
volatile uint32_t buttonPressSnapshot;
volatile uint8_t  lastToken;           /* the number that we displayed
					  last, (previous number for
					  the PWM) */
volatile bool    RThereOthers   = false;        /* Are there other
                                                 * modules? (This
                                                 * should help us
                                                 * decide if we should
                                                 * stop counting if
                                                 * there is no
                                                 * response) */

ISR(TIMER0_OVF_vect)
{
  ticks++;
}


void
timer_init(void)
{
  TCCR0B = _BV(CS02) | _BV(CS00); /* set prescaler to use clock/1024  */
  TIMSK  = _BV(TOIE0);   /* enable the overflow interrupt */

  ticks = 0;
}

/* Dyuman */
/* PUSH BUTTON INTERUPT;
 * Increments the number to be displayed, and
 * then calls display number & calls SEND DATE*/
ISR(INT1_vect)
{
  cli();
  if ((TIMER_SNAPSHOT_MS() - buttonPressSnapshot) >= DEBOUNCE_DELAY) {
    buttonPressSnapshot = TIMER_SNAPSHOT_MS();
    buttonPressed       = true;
  }
}

void flash(){
  _delay_ms(500);
  PORTA &= ~ _BV(1);
  PORTA |= _BV(1);
  _delay_ms(500);
  PORTA &= ~ _BV(1);
}

void
sendUpdate(uint8_t currentNumber)
{
  USI_TWI_Master_Initialise();

  uint8_t buffer[CUR_NUM_CMD_SIZE];
  buffer[0] =
    (TWI_BROADCAST_ADDRESS << TWI_ADR_BITS) | /* address */
    (FALSE << TWI_READ_BIT); /* write operation */
  buffer[1] = CUR_NUM_CMD;
  buffer[2] = currentNumber;

  /* Remember that you are only transmitting it 10 times, and that you can
   * transmit multiple times if it makes trouble... */
  for (int i = 0; i < RETRANSMIT_COUNT; i++) {
    _delay_ms(10); /* Is this necessary? */
    USI_TWI_Start_Transceiver_With_Data(buffer, sizeof(buffer));
    /* keep retransmitting until it is successful */


  }
  _delay_ms(10);
 
  /* reinitialize ourself as a slave */
  USI_TWI_Slave_Initialise(TWI_BROADCAST_ADDRESS);
}

void sendUpdateUpperRange(uint8_t currentNumber)
{
  USI_TWI_Master_Initialise();

  uint8_t buffer[UPPER_RANGE_CMD_SIZE];
  buffer[0] =
    (TWI_BROADCAST_ADDRESS << TWI_ADR_BITS) | /* address */
    (FALSE << TWI_READ_BIT); /* write operation */
  buffer[1] = UPPER_RANGE_CMD;
  buffer[2] = currentNumber;

  /* Remember that you are only transmitting it 10 times, and that you can
   * transmit multiple times if it makes trouble... */
  for (int i = 0; i < RETRANSMIT_COUNT; i++) {
    _delay_ms(10); /* Is this necessary? */
    USI_TWI_Start_Transceiver_With_Data(buffer, sizeof(buffer));
    /* keep retransmitting until it is successful */


  }
  _delay_ms(10);
 
  /* reinitialize ourself as a slave */
  USI_TWI_Slave_Initialise(TWI_BROADCAST_ADDRESS);
}


/* Initialize I/O pins and other stuff */
void
ioinit()
{
  /* setup the outputs for the two digits and the communication LED */
  DDRA |= _BV(1);
  DDRB |= _BV(0) | _BV(1) | _BV(2) | _BV(3);
  DDRD |= _BV(0) | _BV(1) | _BV(2) | _BV(4);
  DDRD |= _BV(5);

  /* set the BL pin to ground */
  PORTD &= ~_BV(5);

  
  PORTB |= _BV(4); /* turn on the internal pull-up for DIP-switch */

  /* find out the required mode of operation */
  mode = 0;
  mode = (PINB & _BV(4));
  if (mode) {             /* this is a service-module */
    PORTD |= _BV(3); // enable pull-up for button pin

    /* enable interrupt for the button */
    MCUCR |= _BV(ISC11); /* only the falling edge generates an interrupt */
    GIMSK |= _BV(INT1);
  }

  mode2 = 0;
  mode2 = (PINB & _BV(6));
  if(mode2) {
    PORTD |= _BV(3); // enable pull-up for button pin

    /* enable interrupt for the button */
    MCUCR |= _BV(ISC11); /* only the falling edge generates an interrupt */
    GIMSK |= _BV(INT1);
  }


  sei();                  // turn on interrupts!
}

/* This function does nothing but display the numbers that it is given. */
void
writeDecoder(uint8_t tens, uint8_t unit)
{
  PORTD &= ~(_BV(0) | _BV(1) | _BV(2) | _BV(4)); /* begin with
						  * zeroing out all
						  * pins attached to
						  * the tens decoder */
  PORTD |= (tens & 0x07);
  /* We are manually setting the fourth bit because the bits in
   * PORTD aren't arranged consecutively */
  if ((tens == 8) || (tens == 9)) {
    PORTD |= _BV(4);
  }
  /* else { */
  /*     PORTD &= ~_BV(4); */
  /* } */

  // set the units digit
  PORTB &= ~(_BV(0) | _BV(1) | _BV(2) | _BV(3));
  PORTB |= (unit & 0x0f);
}

void
displayNumber(uint8_t currentNumber)
{
  uint8_t tens;
  uint8_t unit;
  uint8_t tens1;
  uint8_t unit1;
  int     other = 0;

  tens = currentNumber / 10;
  unit = currentNumber % 10;

  tens1 = lastToken / 10;
  unit1 = lastToken % 10;

  for (int i = 100; i>0; i--) {
    /* set the tens digit */
    writeDecoder(tens, unit);
    for (int o = 0; o<other / 20; o++) {
      _delay_ms(1);
    }
    /* _delay_ms(other); */

    writeDecoder(tens1, unit1);
    for (int o = 0; o<i / 20; o++) {
      _delay_ms(1);
    }
    /* _delay_ms(100-other); */
    other++;
  }

  writeDecoder(tens, unit);
}

int
SearchForOthers()
{
  return (false);     /* We will have to give this some
		       * code... */
}

int
main(void)
{
  token =0;
  lowerRange =0;

  ioinit();
  timer_init();


  /* all devices initialize themselves as slaves */
  USI_TWI_Slave_Initialise(TWI_BROADCAST_ADDRESS);

  /* loop forever */
  for (;; ) {
    /* Block interrupts while we're probing the value of
     * buttonPressed--the interrupt handler may change this value
     * asynchronously */

    /* _delay_ms(15); */

    if (buttonPressed) {
      flash();
  
      /* now that we've determined that there has been a button
       * press event, we can re-enable interrupts and proceed to
       * act upon it. */
      buttonPressed = false;
      sei();

      if(mode2){
	upperRange++;
	if(upperRange ==100){
	  upperRange =0;
	}
	sendUpdateUpperRange(upperRange);
	displayNumber(upperRange);
	lastToken = upperRange;

      }else{

	lastToken = token;
	token = lowerRange;
	token++; /* increment the largest token anywhere displayed */
	lowerRange++;

	if (token == 100) {
	  token = 0;
	}
	if (lowerRange == 100){
	  lowerRange = 0;
	}
	if(upperRange ==100){
	  upperRange =0;
	}

	displayNumber(token); /* update the display */

	/* if (SearchForOthers() || RThereOthers) { */
	sendUpdate(token); /* Also update every other
			    * module on the bus*/

	/*     RThereOthers = true; */
	/* } */

      }
    }

    if (USI_TWI_Data_In_Receive_Bufferata_In_Receive_Buffer()) { /* have we
					     * received
					     * anything
					     * over TWI? */
      uint8_t command = USI_TWI_Receive_Byte();
      switch (command) {
      case CUR_NUM_CMD:
	lowerRange = USI_TWI_Receive_Byte();
	if (!mode && !mode2) {
	  displayNumber(lowerRange);
	  lastToken = lowerRange;
	}
	break;
      case UPPER_RANGE_CMD:
	upperRange = USI_TWI_Receive_Byte();
	break;
      default:
	/* Unexpected communication. consume everything we've
	 * received */
	while (USI_TWI_Data_In_Receive_Buffer()) {
	  USI_TWI_Receive_Byte();
	}
	break;
      }
    }
  }

  /* we will never come here. */
  return (0);
}

